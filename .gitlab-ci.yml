default:
  tags:
    - vb-runner

variables:
  PROJECT_NAME: "antaress"
  PROJECT_ID: "8586"
  LOGIN01: "129.194.61.6"

stages:
#  - build
#  - test
  - documentation
  - staging
  - production

.setup_env:
  before_script:
    - apt update
    - apt install -y curl rsync bzip2 build-essential openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS_LOGIN01" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
    - eval "$(./bin/micromamba shell hook -s posix)"
    - micromamba env create -f ${PROJECT_NAME}_env.yml
    - micromamba activate $PROJECT_NAME
    - pip install PyAstronomy
    - pip install --extra-index-url https://vincent:cestpasfaux@obswww.unige.ch/~delisle/staging bindensity --upgrade
    - pip install pysme-astro

#Build distribution:
#  extends: .setup_env
#  stage: build
#  script:
#    - python setup.py sdist
#  artifacts:
#    paths:
#      - dist/*.tar.gz
#    expire_in: 1 day

#Run test:
#  extends: .setup_env
#  stage: test
#  script:
#    - pip install dist/*.tar.gz
#    - cd test
#    - python -m pytest

Generate documentation:
  extends: .setup_env
  stage: documentation
  script:
 #   - pip install dist/*.tar.gz
    - cd Docs
    - chmod +x Make_doc
    - ./Make_doc
  artifacts:
    paths:
      - Docs/build/html
    expire_in: 1 day

Deploy on Staging:
  extends: .setup_env
  stage: staging
  script:
#    - rsync -v dist/*.tar.gz dacemgr@${DACECALC1}:/www/people/delisle/public/staging/${PROJECT_NAME}/
    - rsync -rv --delete Docs/build/html/ bourriev@${LOGIN01}:/www/people/bourriev/public/staging/${PROJECT_NAME}/doc

Release and deploy on Production:
  extends: .setup_env
  stage: production
  script:
    # According to documentation, gitlab uses detached HEAD and we need to go back to main to release.
    # See https://gitlab.com/gitlab-org/gitlab-ce/issues/19421
    - git checkout -B main origin/main
    - git config --global user.name 'Gitlab CI'
    - git config --global user.email ''
    - git remote set-url origin "https://gitlab-ci-token:$RELEASE_TOKEN@gitlab.unige.ch/bourrier/${PROJECT_NAME}.git"
    # Tag (update version number in pyproject.toml)
    - VERSION=$(grep version pyproject.toml | sed -e 's/.*version = "\([^"]*\)"/\1/')
    - TAG_VERSION="v$VERSION"
    - git tag -a "$TAG_VERSION" -m "Release $PROJECT_NAME $TAG_VERSION"
    - git push origin "$TAG_VERSION" --quiet -o ci.skip
    # Add release on gitlab (via gitlab API)
    #    - curl -X POST -H "PRIVATE-TOKEN:$RELEASE_TOKEN" -F "name=Release $PROJECT_NAME $TAG_VERSION" -F "tag_name=$TAG_VERSION" -F "ref=$TAG_VERSION" "https://gitlab.unige.ch/api/v4/projects/${PROJECT_ID}/releases"
    # Deploy on obswww.unige.ch/~bourriev/
#     - rsync -v dist/*.tar.gz dacemgr@${DACECALC1}:/www/people/delisle/public/${PROJECT_NAME}/
    - rsync -rv --delete Docs/build/html bourriev@${LOGIN01}:/www/people/bourriev/public/${PROJECT_NAME}/doc
    - rsync -rv --delete Docs/build/html bourriev@${LOGIN01}:/www/people/bourriev/public/${PROJECT_NAME}/doc_hist/${TAG_VERSION}
#     # Deploy on Pypi
#     - python -m twine upload dist/*.tar.gz
    # Upgrade to next version
    - MAJOR_DIGIT=`echo $VERSION | awk -F. '{print $1}'`
    - MINOR_DIGIT=`echo $VERSION | awk -F. '{print $2}'`
    - PATCH_DIGIT=`echo $VERSION | awk -F. '{print $3}'`
    - PATCH_DIGIT=$((PATCH_DIGIT + 1))
    - NEW_VERSION="$MAJOR_DIGIT.$MINOR_DIGIT.$PATCH_DIGIT"
    - echo $NEW_VERSION
    # Need to hack sed to work on both mac and unix. See details here : https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
    - sed -i.bak s"/version = \"$VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
    - git add pyproject.toml
    - git commit -m "Upgrade project to next version $NEW_VERSION"
    - git push origin main --quiet -o ci.skip
  when: manual
