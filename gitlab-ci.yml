default:
  tags:
    - kubernetes-runner

variables:
  PROJECT_NAME: "spleaf"
  PROJECT_ID: "1383"
  DACECALC1: "10.194.66.55"

stages:
  - build
  - test
  - documentation
  - staging
  - production

.setup_env:
  before_script:
    - apt update
    - apt install -y curl rsync bzip2 build-essential openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS_DACECALC1" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
    - eval "$(./bin/micromamba shell hook -s posix)"
    - micromamba env create -f ${PROJECT_NAME}_env.yml
    - micromamba activate $PROJECT_NAME

Build distribution:
  extends: .setup_env
  stage: build
  script:
    - python setup.py sdist
  artifacts:
    paths:
      - dist/*.tar.gz
    expire_in: 1 day

Run test:
  extends: .setup_env
  stage: test
  script:
    - pip install dist/*.tar.gz
    - cd test
    - python -m pytest

Generate documentation:
  extends: .setup_env
  stage: documentation
  script:
    - pip install dist/*.tar.gz
    - cd doc
    - make html
  artifacts:
    paths:
      - doc/build/html
    expire_in: 1 day

Deploy on Staging:
  extends: .setup_env
  stage: staging
  script:
    - rsync -v dist/*.tar.gz dacemgr@${DACECALC1}:/www/people/delisle/public/staging/${PROJECT_NAME}/
    - rsync -rv --delete doc/build/html/ dacemgr@${DACECALC1}:/www/people/delisle/public/staging/${PROJECT_NAME}/doc

Release and deploy on Production:
  extends: .setup_env
  stage: production
  script:
    # According to documentation, gitlab uses detached HEAD and we need to go back to master to release.
    # See https://gitlab.com/gitlab-org/gitlab-ce/issues/19421
    - git checkout -B master origin/master
    - git config --global user.name 'Gitlab CI'
    - git config --global user.email ''
    - git remote set-url origin "https://gitlab-ci-token:$RELEASE_TOKEN@gitlab.unige.ch/delisle/${PROJECT_NAME}.git"
    # Tag
    - VERSION=`grep __version__ ${PROJECT_NAME}/__info__.py | sed 's/.*version__ = "//' | sed 's/"//'`
    - TAG_VERSION="v$VERSION"
    - git tag -a "$TAG_VERSION" -m "Release $PROJECT_NAME $TAG_VERSION"
    - git push origin "$TAG_VERSION" --quiet
    - CHANGES=`cat CHANGES.txt`
    # Add release on gitlab (via gitlab API)
    - curl -X POST -H "PRIVATE-TOKEN:$RELEASE_TOKEN" -F "name=Release $PROJECT_NAME $TAG_VERSION" -F "tag_name=$TAG_VERSION" -F "ref=$TAG_VERSION" -F "description=Changes:$CHANGES" "https://gitlab.unige.ch/api/v4/projects/${PROJECT_ID}/releases"
    # Deploy on https://obswww.unige.ch/~delisle/
    - rsync -v dist/*.tar.gz dacemgr@${DACECALC1}:/www/people/delisle/public/${PROJECT_NAME}/
    - rsync -rv --delete doc/build/html/ dacemgr@${DACECALC1}:/www/people/delisle/public/${PROJECT_NAME}/doc
    - rsync -rv --delete doc/build/html/ dacemgr@${DACECALC1}:/www/people/delisle/public/${PROJECT_NAME}/doc_hist/${TAG_VERSION}
    # Deploy on Pypi
    - python -m twine upload dist/*.tar.gz
    # Upgrade to next version
    - MAJOR_DIGIT=`echo $VERSION | awk -F. '{print $1}'`
    - MINOR_DIGIT=`echo $VERSION | awk -F. '{print $2}'`
    - PATCH_DIGIT=`echo $VERSION | awk -F. '{print $3}'`
    - PATCH_DIGIT=$((PATCH_DIGIT + 1))
    - NEW_VERSION="$MAJOR_DIGIT.$MINOR_DIGIT.$PATCH_DIGIT"
    - echo $NEW_VERSION
    # Need to hack sed to work on both mac and unix. See details here : https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
    - sed -i.bak s"/version__ = \"$VERSION\"/version__ = \"$NEW_VERSION\"/g" ${PROJECT_NAME}/__info__.py
    - git add ${PROJECT_NAME}/__info__.py
    - git commit -m "Upgrade project to next version $NEW_VERSION"
    - git push origin master --quiet
  when: manual
